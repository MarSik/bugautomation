import org.marsik.bugautomation.facts.BugzillaBug;
import org.marsik.bugautomation.facts.BugzillaPriorityLevel;
import org.marsik.bugautomation.facts.BugzillaStatus;
import org.marsik.bugautomation.facts.TrelloBoard;
import org.marsik.bugautomation.facts.TrelloCard;
import org.marsik.bugautomation.facts.TrelloLabel;
import org.marsik.bugautomation.facts.Bug;
import org.marsik.bugautomation.facts.User;
import org.marsik.bugautomation.services.BugzillaActions;
import org.marsik.bugautomation.services.InternalActions;
import org.marsik.bugautomation.services.TrelloActions;
import org.marsik.bugautomation.facts.BugzillaBugFlag;
import org.marsik.bugautomation.services.ConfigurationService;
import org.marsik.bugautomation.stats.SingleStat;
import org.marsik.bugautomation.stats.Stats;

global InternalActions internal;
global TrelloActions trello;
global BugzillaActions bugzilla;
global ConfigurationService config;

/*
 * Synchronize cards with bugzilla
 */

// A bugzilla bug exists that has no corresponding trello card
rule "newBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    not(exists TrelloCard(bug == $bug, board == $board))
  then
    trello.createCard($board, config.getCached("cfg.backlog"), $bz, $user);
end

// Make sure the bugzilla assignment is visible in trello
rule "bugAssignment"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"), $user memberOf members)
    $card: TrelloCard(bug == $bug, board == $board, $user not memberOf assignedTo)
  then
    trello.assignCard($card, $user);
end

// A card for a closed bug should be closed as well
rule "closedBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo, status == BugzillaStatus.CLOSED)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status not str[startsWith] "done")
  then
    trello.moveCard($card, $board, "Done");
end

// A card for a finished bug (handed over to QE) should move to the Documentation column (unless requires_doc_text- is set)
rule "documentBug"
  when
    $bz: BugzillaBug($bug : bug, done == true, $flags: flags)
    not(exists BugzillaBugFlag(flag == "requires_doc_text-") from $flags)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status not str[startsWith] "done", status != "documentation")
  then
    trello.moveCard($card, $board, "documentation");
end

// A card for a finished bug (handed over to QE) should move to the Done column when no documentation is needed
rule "doneBug"
  when
    $bz: BugzillaBug($bug : bug, done == true, $flags: flags)
    BugzillaBugFlag(flag == "requires_doc_text-") from $flags
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status not str[startsWith] "done")
  then
    trello.moveCard($card, $board, "done");
end

// A card with a bug number that has no corresponding bug record or custom bug id in the knowledge db
rule "unknownBug"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, bug != null, board == $board, status not str[startsWith] "done")
    not(exists BugzillaBug($bug == bug))
    not(exists Bug(this == $bug))
  then
    trello.moveCard($card, $board, "done");
end

// A card in finished columns (documentation, done) that is linked to unfinished bugzilla entry
// should move back to TODO (or In Progress?)
rule "openBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo, done == false)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status str[startsWith] "done" || status == "documentation")
  then
    trello.moveCard($card, $board, config.getCached("cfg.backlog"));
end

// A bug with patch activity should move to In Progress column
// TODO I wonder if we want this, we might want to move the card back to todo even when bz is in BugzillaStatus.POST state
rule "modifiedBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo, status == BugzillaStatus.POST)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status == config.getCached("cfg.backlog"))
  then
    trello.moveCard($card, $board, "In Progress");
end

// Add blocker label to all cards with blocker bugs
rule "blockerBug"
  when
    $bz: BugzillaBug($bug : bug, status != BugzillaStatus.CLOSED, $flags: flags)
    BugzillaBugFlag(flag == "blocker+") from $flags
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "blocker") from $labels)
  then
    trello.assignLabelToCard($card, "blocker");
end

// Add blocker label to all cards with regression bugs
rule "regressionBug"
  when
    $bz: BugzillaBug($bug : bug, status != BugzillaStatus.CLOSED, "regression" memberOf keywords)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "blocker") from $labels)
  then
    trello.assignLabelToCard($card, "blocker");
end

// Remove blocker label from all non-regression non-blocker bugs
rule "notABlockerBug"
  when
    $bz: BugzillaBug($bug : bug, status != BugzillaStatus.CLOSED, $flags: flags, "regression" not memberOf keywords)
    not (exists BugzillaBugFlag(flag == "blocker+") from $flags)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "blocker") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Add failed qa label to all cards with FailedQA bugs
rule "failedQA"
  when
    $bz: BugzillaBug($bug : bug, status != BugzillaStatus.CLOSED, "failedqa" memberOf keywords || "failedqa" memberOf verified)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "failedqa") from $labels)
  then
    trello.assignLabelToCard($card, "failedqa");
end

// Remove failed qa label from all cards where FailedQA keyword was removed
rule "notFailedQABug"
  when
    $bz: BugzillaBug($bug : bug, status != BugzillaStatus.CLOSED, "failedqa" not memberOf keywords, "failedqa" not memberOf verified)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "failedqa") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Add triage label to all cards without assignee, priority and target milestone
rule "needsTriage"
  when
    $bz: BugzillaBug($bug : bug, done == false, targetMilestone == null || targetMilestone == "",
                     priority == BugzillaPriorityLevel.UNSPECIFIED,
                     "triaged" not memberOf keywords,
                     "futurefeature" not memberOf keywords,
                     $flags : flags)
    not(exists BugzillaBugFlag(futureFlag()) from $flags)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "triage") from $labels)
  then
    trello.assignLabelToCard($card, "triage");
end

// Add triage label to cards (with no real bug, but custom bug id is allowed)
rule "cardNeedsTriage"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, $blocks: blocks, board == $board, $labels: labels,
      status not str[startsWith] "done", status not str[startsWith] "documentation",
      score == 0, targetMilestone == null || targetMilestone == "", dueDate == null || dueDate == "")
    not(exists TrelloLabel(name == "triage") from $labels)
    not(exists BugzillaBug(bug == $bug))
  then
    trello.assignLabelToCard($card, "triage");
end

// Remove triage label from already fixed and properly targeted bugs and cards
rule "alreadyTriaged"
  when
    $bz: BugzillaBug($bug : bug, done || (targetMilestone != null && targetMilestone != "")
      || priority > BugzillaPriorityLevel.UNSPECIFIED || "triaged" memberOf keywords
      || "futurefeature" memberOf keywords)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "alreadyTriagedCardDone"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(board == $board, status str[startsWith] "done", $labels: labels)
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "alreadyTriagedDocumentation"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(board == $board, status str[startsWith] "documentation", $labels: labels)
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "alreadyTriagedFutureFlag"
  when
    $bz: BugzillaBug($bug : bug, $flags : flags)
    BugzillaBugFlag(futureFlag()) from $flags

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "alreadyTriagedCardMilestone"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, board == $board, $labels: labels, targetMilestone != null, targetMilestone != "")
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "alreadyTriagedCardScore"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, board == $board, $labels: labels, score > 0)
    not(exists BugzillaBug(bug == $bug))
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "alreadyTriagedCardDueDate"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, board == $board, $labels: labels, dueDate != null && dueDate != "")
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Mark all ZStream cards with insufficient flags
rule "missingZStreamFlags"
  when
    $bz: BugzillaBug($bug : bug, $flags: flags, community == "redhat",
      targetMilestone str[startsWith] "ovirt-3." || targetMilestone str[startsWith] "ovirt-4.0.")
    not(exists BugzillaBugFlag(approves($bz.getTargetMilestone())) from $flags)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "flags missing") from $labels)
  then
    trello.assignLabelToCard($card, "flags missing");
end

// Remove missing flags label when all necessary acks are present on a bug
rule "okZStreamFlags"
  when
    $bz: BugzillaBug($bug : bug, $flags: flags, $tm : targetMilestone)
    BugzillaBugFlag(approves($tm)) from $flags

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "flags missing") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Remove missing flags label when the bug is not targeted to ZStream
rule "zStreamFlagsNotNeededRelease"
  when
    $bz: BugzillaBug($bug : bug,
      targetMilestone not str[startsWith] "ovirt-3.",
      targetMilestone not str[startsWith] "ovirt-4.0.")

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "flags missing") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

rule "zStreamFlagsNotNeededCommunity"
  when
    $bz: BugzillaBug($bug : bug, community != "redhat")
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "flags missing") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Mark cards that are probably done or not needed, but need manual check
rule "blocksClosedBug"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($blocks : blocks, blocks.empty == false, status not str[startsWith] "documentation", status not str[startsWith] "done", board == $board, $labels: labels)
    not(exists BugzillaBug(done == false, bug memberOf $blocks))
    not(exists TrelloLabel(name == "done?") from $labels)
  then
    trello.assignLabelToCard($card, "done?");
end

// Mark cards that depend on a bug to be finished first with a label
rule "blockedByUnclosedBug"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, status not str[startsWith] "done", board == $board, $labels: labels)
    BugzillaBug($bug2 : bug, bug != $bug, $bug memberOf blocks, done == false)
    exists TrelloCard(bug == $bug2, status not str[startsWith] "done", status != "documentation", board == $board)
    not(exists TrelloLabel(name == "waiting") from $labels)
  then
    trello.assignLabelToCard($card, "waiting");
end

rule "blockedByUnclosedCard"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, status not str[startsWith] "done", board == $board, $labels: labels)
    not(exists BugzillaBug(bug == $bug, done == true))
    exists TrelloCard(status not str[startsWith] "done", status != "documentation", $bug memberOf blocks)
    not(exists TrelloLabel(name == "waiting") from $labels)
  then
    trello.assignLabelToCard($card, "waiting");
end

rule "notBlockedByAnyUnclosedCardOrBugCard"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, status not str[startsWith] "done", board == $board, $labels: labels)
    not TrelloCard(status not str[startsWith] "done", status != "documentation", $bug memberOf blocks)
    (not BugzillaBug(done == false, bug != $bug, $bug memberOf blocks) or
     not (BugzillaBug($bug2 : bug, done == false, bug != $bug, $bug memberOf blocks) and TrelloCard(bug == $bug2, status not str[startsWith] "done", status != "documentation")))
    $label: TrelloLabel(name == "waiting") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

/*
 * Sort backlog rules
 */

// The first to fix card needs to be on top when two cards have the same score
rule "orderBacklogByPmPriority"
  when
    $bz: BugzillaBug($bug1 : bug, $pmPriority : pmPriority)
    BugzillaBug($bug2 : bug, pmPriority < $pmPriority)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard(bug == $bug1, board == $board, status == config.getCached("cfg.backlog"), $score : score, $pos : pos)
    $card2: TrelloCard(bug == $bug2, board == $board, status == config.getCached("cfg.backlog"), $score == score, pos > $pos)
  then
    trello.switchCards($card1, $card2);
end

rule "orderBacklogByPmScore"
  when
    $bz: BugzillaBug($bug1 : bug, $pmScore : pmScore, $pmPriority : pmPriority)
    BugzillaBug($bug2 : bug, pmScore > $pmScore, pmPriority == $pmPriority)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard(bug == $bug1, board == $board, status == config.getCached("cfg.backlog"), $score : score, $pos : pos)
    $card2: TrelloCard(bug == $bug2, board == $board, status == config.getCached("cfg.backlog"), $score == score, pos > $pos)
  then
    trello.switchCards($card1, $card2);
end

rule "orderBacklogByBugBlocks"
  when
    $bz: BugzillaBug($bug1 : bug)
    BugzillaBug($bug2 : bug, $bug1 memberOf blocks)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard(bug == $bug1, board == $board, status == config.getCached("cfg.backlog"), $score : score, $pos : pos)
    $card2: TrelloCard(bug == $bug2, board == $board, status == config.getCached("cfg.backlog"), $score == score, pos > $pos)
  then
    trello.switchCards($card1, $card2);
end

rule "orderBacklogByCardBlocks"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard($bug : bug, board == $board, status == config.getCached("cfg.backlog"), $score : score, $pos : pos)
    $card2: TrelloCard($bug memberOf blocks, board == $board, status == config.getCached("cfg.backlog"), $score == score, pos > $pos)
  then
    trello.switchCards($card1, $card2);
end

// Order cards by score
rule "orderBacklogByScore"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard(board == $board, status == config.getCached("cfg.backlog"), score != null, $score : score, $pos : pos)
    $card2: TrelloCard(board == $board, status == config.getCached("cfg.backlog"), score != null, score > $score, pos > $pos)
  then
    trello.switchCards($card1, $card2);
end

/**
 * Statistics section, the rules have to be fired during every
 * rule evaluation cycle. That is why they depend on the stats
 * object.
 */

// Compute card stats
rule "cardStats"
  when
    $stats: Stats()
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(board == $board, $status : status, $owners : assignedTo)
    User($name: name) from $owners
  then
    $stats.add(SingleStat.SPRINT_CONTENT)
      .label("status", $status)
      .label("assigned_to", $name)
      .value(1f);
end

rule "cardStatsNoOwner"
  when
    $stats: Stats()
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(board == $board, $status : status, assignedTo.empty == true)
  then
    $stats.add(SingleStat.SPRINT_CONTENT)
      .label("status", $status)
      .label("assigned_to", "none")
      .value(1f);
end

// Compute bug stats
rule "bugStats"
  when
    $stats: Stats()
    $bug: BugzillaBug()
  then
    $stats.add(SingleStat.BUGS)
      .label("status", $bug.getStatus().name().toLowerCase())
      .label("target_milestone", $bug.getTargetMilestone())
      .label("assigned_to", $bug.getAssignedTo().getName())
      .value(1f);
end

/**
 * This section is used to pre-populate the card score prior to sorting.
 *
 * Most scores should be composed of digits for release part + priority + severity
 * into a three digit number.
 *
 * General example: 100 * <release> + 10 * $bug.priority.ordinal() + $bug.severity.ordinal()
 *
 * Score rules have to have higher priority than rules with effects to avoid
 * noise during rescoring. (salience 100 does the job)
 */

 // Blocking bugs have to inherit PM score and PM priority
 rule "blockingBugPmScore"
   salience 100
   when
     BugzillaBug($bzId : id, $bug1 : bug, $pmScore : pmScore)
     $bz: BugzillaBug($bug2 : bug, id != $bzId, $bug1 memberOf blocks, pmScore < $pmScore)
   then
     modify($bz) {
        setPmScore($pmScore);
     }
 end

  rule "blockingBugPmPriority"
    salience 100
    when
      BugzillaBug($bzId : id, $bug1 : bug, $pmPriority : pmPriority)
      $bz: BugzillaBug($bug2 : bug, id != $bzId, $bug1 memberOf blocks, pmPriority > $pmPriority)
    then
      modify($bz) {
         setPmPriority($pmPriority);
      }
  end

 // Bugs with higher PM score or priority (lower number) have to have at least
 // the same card score as cards with lower PM score
 //
 // But only apply this to bugs with the same priority (not all PMs use pmScore or pmPriority) that
 // are targeted.
 //
 // This effectively removes the targetRelease score from the equation as the by PM imposed ordering
 // overrides it
 rule "cardScoreRelationsMustReflectPmScore"
   salience 100
   when
     BugzillaBug($bzId : id, $bug1 : bug, $priority : priority, $pmScore : pmScore, $pmPriority : pmPriority, targetMilestone != "")
     BugzillaBug($bug2 : bug, id != $bzId, priority == $priority, pmScore > $pmScore || pmPriority < $pmPriority, targetMilestone != "")

     $card1: TrelloCard(bug == $bug1, $score : score)
     $card2: TrelloCard(bug == $bug2, score == null || score < $score)
   then
     internal.setScore($card2, $score);
 end

 // Bugs that block something with a higher priority have high priority too
 // (bug2 blocks bug1 in this rule)
 rule "blockingBugPriority"
   salience 100
   when
     $bz: BugzillaBug($bzId : id, $bug1 : bug)
     BugzillaBug($bug2 : bug, id != $bz.id, $bug1 memberOf blocks)

     $card1: TrelloCard(bug == $bug1, $score : score)
     $card2: TrelloCard(bug == $bug2, score == null || $score > score)
   then
     internal.setScore($card2, $score);
 end

 // Cards that block something with a higher priority have high priority too
 // (card2 blocks card1 bug in this rule)
 rule "blockingCardPriority"
   salience 100
   when
     $card1: TrelloCard(bug != null, $bug : bug, score != null, $score : score)
     $card2: TrelloCard($bug memberOf blocks, score == null || $score > score)
   then
     internal.setScore($card2, $score);
 end

// Specific release priorities

 rule "releasePriorityFuture"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone str[startsWith] config.getCached("release.future.prefix"))
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, config.getCachedInt("release." + config.getCached("release.future.release"), 0) + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

// Release score fallbacks for other versions
// keep the salience lower than 100 (but higher than 0)
 rule "scoreStandaloneCard"
   salience 99
   when
     $card1: TrelloCard($bug : bug, targetMilestone != null, $tm : targetMilestone, score == null)
     not(exists BugzillaBug(bug == $bug))
   then
     internal.setScore($card1, config.getCachedInt("release." + $tm, 0));
 end

 rule "releasePriorityDs"
   salience 99
   when
     $bz: BugzillaBug($bug1 : bug, community == "redhat", $tm : targetMilestone, $flags : flags)
     BugzillaBugFlag(approves($bz.getTargetMilestone())) from $flags
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, config.getCachedInt("release." + $tm, 0) + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriorityUs"
   salience 99
   when
     $bz: BugzillaBug($bug1 : bug, community != "redhat", $tm : targetMilestone)
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, config.getCachedInt("release." + $tm, 0) + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 // Bugs with any target release are more important than bugs without it
 rule "releasePriorityNone"
   salience 98
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone == null || targetMilestone == "")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, -100 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

// Score callback
 rule "scoreNotSetBz"
   salience 97
   when
     $bz: BugzillaBug($bug1 : bug)
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 0 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

  rule "scoreNotSetNoBz"
    salience 97
    when
      $card1: TrelloCard($bug : bug, score == null)
      not(exists BugzillaBug(bug == $bug))
    then
      internal.setScore($card1, 0);
  end
