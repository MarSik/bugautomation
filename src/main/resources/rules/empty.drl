import org.marsik.bugautomation.facts.BugzillaBug;
import org.marsik.bugautomation.facts.BugzillaPriorityLevel;
import org.marsik.bugautomation.facts.TrelloBoard;
import org.marsik.bugautomation.facts.TrelloCard;
import org.marsik.bugautomation.facts.TrelloLabel;
import org.marsik.bugautomation.facts.Bug;
import org.marsik.bugautomation.services.BugzillaActions;
import org.marsik.bugautomation.services.InternalActions;
import org.marsik.bugautomation.services.TrelloActions;
import org.marsik.bugautomation.facts.BugzillaBugFlag;
import org.marsik.bugautomation.services.ConfigurationService;
import org.marsik.bugautomation.stats.SingleStat;
import org.marsik.bugautomation.stats.Stats;

global InternalActions internal;
global TrelloActions trello;
global BugzillaActions bugzilla;
global ConfigurationService config;

/*
 * Synchronize cards with bugzilla
 */

// A bugzilla bug exists that has no corresponding trello card
rule "newBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    not(exists TrelloCard(bug == $bug, board == $board))
  then
    trello.createCard($board, config.getCached("cfg.backlog"), $bz, $user);
end

// Make sure the bugzilla assignment is visible in trello
rule "bugAssignment"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"), $user memberOf members)
    $card: TrelloCard(bug == $bug, board == $board, $user not memberOf assignedTo)
  then
    trello.assignCard($card, $user);
end

// A card for a closed bug should be closed as well
rule "closedBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo, status == "closed")
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status != "done")
  then
    trello.moveCard($card, $board, "Done");
end

// A card for a finished bug (handed over to QE) should move to the Documentation column (unless requires_doc_text- is set)
rule "documentBug"
  when
    $bz: BugzillaBug($bug : bug, status == "modified" || status == "on_qa" || status == "verified", $flags: flags)
    not(exists BugzillaBugFlag(flag == "requires_doc_text-") from $flags)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status != "done", status != "documentation")
  then
    trello.moveCard($card, $board, "documentation");
end

// A card for a finished bug (handed over to QE) should move to the Done column when no documentation is needed
rule "doneBug"
  when
    $bz: BugzillaBug($bug : bug, status == "modified" || status == "on_qa" || status == "verified", $flags: flags)
    BugzillaBugFlag(flag == "requires_doc_text-") from $flags
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status != "done")
  then
    trello.moveCard($card, $board, "done");
end

// A card with a bug number that has no corresponding bug record in the knowledge db
rule "unknownBug"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard($bug : bug, bug != null, board == $board, status != "done")
    not(exists BugzillaBug($bug == bug))
  then
    trello.moveCard($card, $board, "Done");
end

// A card in finished columns (documentation, done) that is linked to unfinished bugzilla entry
// should move back to TODO (or In Progress?)
rule "openBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo, status == "new" || status == "assigned" || status == "post")
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status == "done" || status == "documentation")
  then
    trello.moveCard($card, $board, config.getCached("cfg.backlog"));
end

// A bug with patch activity should move to In Progress column
// TODO I wonder if we want this, we might want to move the card back to todo even when bz is in post state
rule "modifiedBug"
  when
    $bz: BugzillaBug($bug : bug, $user : assignedTo, status == "post")
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, status == config.getCached("cfg.backlog"))
  then
    trello.moveCard($card, $board, "In Progress");
end

// Add blocker label to all cards with blocker bugs
rule "blockerBug"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", $flags: flags)
    BugzillaBugFlag(flag == "blocker+") from $flags
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "blocker") from $labels)
  then
    trello.assignLabelToCard($card, "blocker");
end

// Add blocker label to all cards with regression bugs
rule "regressionBug"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", "regression" memberOf keywords)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "blocker") from $labels)
  then
    trello.assignLabelToCard($card, "blocker");
end

// Remove blocker label from all non-regression non-blocker bugs
rule "notABlockerBug"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", $flags: flags, "regression" not memberOf keywords)
    not (exists BugzillaBugFlag(flag == "blocker+") from $flags)
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "blocker") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Add failed qa label to all cards with FailedQA bugs
rule "failedQA"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", "failedqa" memberOf keywords || "failedqa" memberOf verified)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "failedqa") from $labels)
  then
    trello.assignLabelToCard($card, "failedqa");
end

// Remove failed qa label from all cards where FailedQA keyword was removed
rule "notFailedQABug"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", "failedqa" not memberOf keywords, "failedqa" not memberOf verified)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "failedqa") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Add triage label to all cards without assignee, priority and target milestone
rule "needsTriage"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", targetMilestone == null,
                     priority == BugzillaPriorityLevel.UNSPECIFIED,
                     "triaged" not memberOf keywords)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "triage") from $labels)
  then
    trello.assignLabelToCard($card, "triage");
end

// Remove triage label from targeted bugs
rule "alreadyTriaged"
  when
    $bz: BugzillaBug($bug : bug, status == "closed" || targetMilestone != null
      || priority > BugzillaPriorityLevel.UNSPECIFIED || "triaged" memberOf keywords)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "triage") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Mark all ZStream cards with insufficient flags
rule "missingZStreamFlags"
  when
    $bz: BugzillaBug($bug : bug, status != "closed", "zstream" memberOf keywords, $flags: flags)
    not(exists BugzillaBugFlag(flag == "ovirt-4.0.z+") from $flags)
    not(exists BugzillaBugFlag(flag == "ovirt-3.6.z+") from $flags)
    not(exists BugzillaBugFlag(flag == "rhevm-4.0.z+") from $flags)
    not(exists BugzillaBugFlag(flag == "rhevm-3.6.z+") from $flags)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    not(exists TrelloLabel(name == "flags missing") from $labels)
  then
    trello.assignLabelToCard($card, "flags missing");
end

// Remove missing flags label when all necessary acks are present on ZStream bug
rule "okZStreamFlags"
  when
    $bz: BugzillaBug($bug : bug, "zstream" memberOf keywords, $flags: flags)
    ((BugzillaBugFlag(flag == "ovirt-4.0.z+") from $flags)
    || (BugzillaBugFlag(flag == "ovirt-3.6.z+") from $flags)
    || (BugzillaBugFlag(flag == "rhevm-4.0.z+") from $flags)
    || (BugzillaBugFlag(flag == "rhevm-3.6.z+") from $flags))

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "flags missing") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

// Remove missing flags label when the bug is not targeted to ZStream
rule "notAZStream"
  when
    $bz: BugzillaBug($bug : bug, "zstream" not memberOf keywords)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(bug == $bug, board == $board, $labels: labels)
    $label: TrelloLabel(name == "flags missing") from $labels
  then
    trello.removeLabelFromCard($card, $label);
end

/*
 * Sort backlog rules
 */

// The first to fix card needs to be on top when two cards have the same score
rule "orderBacklogByBlocks"
  when
    $bz: BugzillaBug($bug1 : bug, $blocks : blocks)
    BugzillaBug($bug2 : bug, id memberOf $blocks)

    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard(bug == $bug1, board == $board, status == config.getCached("cfg.backlog"), $score : score, $pos : pos)
    $card2: TrelloCard(bug == $bug2, board == $board, status == config.getCached("cfg.backlog"), $score == score, pos < $pos)
  then
    trello.switchCards($card1, $card2);
end

// Order cards by score
rule "orderBacklogByScore"
  when
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))

    $card1: TrelloCard(board == $board, status == config.getCached("cfg.backlog"), score != null, $score : score, $pos : pos)
    $card2: TrelloCard(board == $board, status == config.getCached("cfg.backlog"), score != null, score > $score, pos > $pos)
  then
    trello.switchCards($card1, $card2);
end

/**
 * Statistics section, the rules have to be fired during every
 * rule evaluation cycle. That is why they depend on the stats
 * object.
 */

// Compute card stats
rule "cardStats"
  when
    $stats: Stats()
    $board: TrelloBoard(name == config.getCached("cfg.board.sprint"))
    $card: TrelloCard(board == $board, $status : status)
  then
    $stats.add(SingleStat.SPRINT_CONTENT)
      .label("status", $status)
      .value(1f);
end


/**
 * This section is used to pre-populate the card score prior to sorting.
 *
 * Most scores should be composed of digits for release part + priority + severity
 * into a three digit number.
 *
 * General example: 100 * <release> + 10 * $bug.priority.ordinal() + $bug.severity.ordinal()
 *
 * Score rules have to have higher priority than rules with effects to avoid
 * noise during rescoring. (salience 100 does the job)
 */

 // Bugs that block something with a higher priority have high priority too
 // (bug2 blocks bug1 in this rule)
 rule "blockingBugPriority"
   salience 100
   when
     $bz: BugzillaBug($bzId : id, $bug1 : bug)
     BugzillaBug($bug2 : bug, id != $bz.id, $bzId memberOf blocks)

     $card1: TrelloCard(bug == $bug1, $score : score)
     $card2: TrelloCard(bug == $bug2, score == null || $score > score)
   then
     internal.setScore($card2, $score);
 end

 // Cards that block something with a higher priority have high priority too
 // (card2 blocks card1 bug in this rule)
 rule "blockingCardPriority"
   salience 100
   when
     $card1: TrelloCard(bug != null, $bug : bug, score != null, $score : score)
     $card2: TrelloCard($bug memberOf blocks, score == null || $score > score)
   then
     internal.setScore($card2, $score);
 end

 // Bugs with target release are more important than bugs without it
 rule "releasePriorityNone"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone == null || targetMilestone == "")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 0 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriority405"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone != null, targetMilestone == "ovirt-4.0.5")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 400 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriority406"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone != null, targetMilestone == "ovirt-4.0.6")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 200 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriority369"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone != null, targetMilestone == "ovirt-3.6.9")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 300 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriority3610"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone != null, targetMilestone == "ovirt-3.6.10")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 200 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriority407"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone != null, targetMilestone == "ovirt-4.0.7")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 100 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end

 rule "releasePriority41"
   salience 100
   when
     $bz: BugzillaBug($bug1 : bug, targetMilestone != null, targetMilestone str[startsWith] "ovirt-4.1.")
     $card1: TrelloCard(bug == $bug1, score == null)
   then
     internal.setScore($card1, 100 + 10 * $bz.getPriority().ordinal() + $bz.getSeverity().ordinal());
 end
